// Copyright 2022 Lekko Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.7.2 with parameter "target=ts,import_extension=none"
// @generated from file lekko/backend/v1beta1/distribution_service.proto (package lekko.backend.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3, Timestamp } from "@bufbuild/protobuf"
import { Feature as Feature$1 } from "../../feature/v1beta1/feature_pb"

/**
 * @generated from message lekko.backend.v1beta1.RepositoryKey
 */
export class RepositoryKey extends Message<RepositoryKey> {
  /**
   * @generated from field: string owner_name = 1;
   */
  ownerName = ""

  /**
   * @generated from field: string repo_name = 2;
   */
  repoName = ""

  constructor(data?: PartialMessage<RepositoryKey>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "lekko.backend.v1beta1.RepositoryKey"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repo_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): RepositoryKey {
    return new RepositoryKey().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): RepositoryKey {
    return new RepositoryKey().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RepositoryKey {
    return new RepositoryKey().fromJsonString(jsonString, options)
  }

  static equals(
    a: RepositoryKey | PlainMessage<RepositoryKey> | undefined,
    b: RepositoryKey | PlainMessage<RepositoryKey> | undefined,
  ): boolean {
    return proto3.util.equals(RepositoryKey, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.GetRepositoryVersionRequest
 */
export class GetRepositoryVersionRequest extends Message<GetRepositoryVersionRequest> {
  /**
   * @generated from field: lekko.backend.v1beta1.RepositoryKey repo_key = 1;
   */
  repoKey?: RepositoryKey

  /**
   * @generated from field: string session_key = 2;
   */
  sessionKey = ""

  constructor(data?: PartialMessage<GetRepositoryVersionRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "lekko.backend.v1beta1.GetRepositoryVersionRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_key", kind: "message", T: RepositoryKey },
    {
      no: 2,
      name: "session_key",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetRepositoryVersionRequest {
    return new GetRepositoryVersionRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetRepositoryVersionRequest {
    return new GetRepositoryVersionRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetRepositoryVersionRequest {
    return new GetRepositoryVersionRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetRepositoryVersionRequest
      | PlainMessage<GetRepositoryVersionRequest>
      | undefined,
    b:
      | GetRepositoryVersionRequest
      | PlainMessage<GetRepositoryVersionRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetRepositoryVersionRequest, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.GetRepositoryVersionResponse
 */
export class GetRepositoryVersionResponse extends Message<GetRepositoryVersionResponse> {
  /**
   * @generated from field: string commit_sha = 1;
   */
  commitSha = ""

  constructor(data?: PartialMessage<GetRepositoryVersionResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    "lekko.backend.v1beta1.GetRepositoryVersionResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commit_sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetRepositoryVersionResponse {
    return new GetRepositoryVersionResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetRepositoryVersionResponse {
    return new GetRepositoryVersionResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetRepositoryVersionResponse {
    return new GetRepositoryVersionResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetRepositoryVersionResponse
      | PlainMessage<GetRepositoryVersionResponse>
      | undefined,
    b:
      | GetRepositoryVersionResponse
      | PlainMessage<GetRepositoryVersionResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetRepositoryVersionResponse, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.GetRepositoryContentsRequest
 */
export class GetRepositoryContentsRequest extends Message<GetRepositoryContentsRequest> {
  /**
   * @generated from field: lekko.backend.v1beta1.RepositoryKey repo_key = 1;
   */
  repoKey?: RepositoryKey

  /**
   * optional namespace_name to filter responses by
   *
   * @generated from field: string namespace_name = 2;
   */
  namespaceName = ""

  /**
   * optional feature_name to filter responses by
   *
   * @generated from field: string feature_name = 3;
   */
  featureName = ""

  /**
   * @generated from field: string session_key = 4;
   */
  sessionKey = ""

  constructor(data?: PartialMessage<GetRepositoryContentsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    "lekko.backend.v1beta1.GetRepositoryContentsRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_key", kind: "message", T: RepositoryKey },
    {
      no: 2,
      name: "namespace_name",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 3,
      name: "feature_name",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 4,
      name: "session_key",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetRepositoryContentsRequest {
    return new GetRepositoryContentsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetRepositoryContentsRequest {
    return new GetRepositoryContentsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetRepositoryContentsRequest {
    return new GetRepositoryContentsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetRepositoryContentsRequest
      | PlainMessage<GetRepositoryContentsRequest>
      | undefined,
    b:
      | GetRepositoryContentsRequest
      | PlainMessage<GetRepositoryContentsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetRepositoryContentsRequest, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.GetRepositoryContentsResponse
 */
export class GetRepositoryContentsResponse extends Message<GetRepositoryContentsResponse> {
  /**
   * @generated from field: string commit_sha = 1;
   */
  commitSha = ""

  /**
   * @generated from field: repeated lekko.backend.v1beta1.Namespace namespaces = 2;
   */
  namespaces: Namespace[] = []

  constructor(data?: PartialMessage<GetRepositoryContentsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    "lekko.backend.v1beta1.GetRepositoryContentsResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commit_sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: "namespaces",
      kind: "message",
      T: Namespace,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetRepositoryContentsResponse {
    return new GetRepositoryContentsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetRepositoryContentsResponse {
    return new GetRepositoryContentsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetRepositoryContentsResponse {
    return new GetRepositoryContentsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetRepositoryContentsResponse
      | PlainMessage<GetRepositoryContentsResponse>
      | undefined,
    b:
      | GetRepositoryContentsResponse
      | PlainMessage<GetRepositoryContentsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetRepositoryContentsResponse, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.Namespace
 */
export class Namespace extends Message<Namespace> {
  /**
   * @generated from field: string name = 1;
   */
  name = ""

  /**
   * @generated from field: repeated lekko.backend.v1beta1.Feature features = 2;
   */
  features: Feature[] = []

  constructor(data?: PartialMessage<Namespace>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "lekko.backend.v1beta1.Namespace"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "features", kind: "message", T: Feature, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Namespace {
    return new Namespace().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Namespace {
    return new Namespace().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Namespace {
    return new Namespace().fromJsonString(jsonString, options)
  }

  static equals(
    a: Namespace | PlainMessage<Namespace> | undefined,
    b: Namespace | PlainMessage<Namespace> | undefined,
  ): boolean {
    return proto3.util.equals(Namespace, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.Feature
 */
export class Feature extends Message<Feature> {
  /**
   * @generated from field: string name = 1;
   */
  name = ""

  /**
   * The sha of the protobuf binary according to git.
   *
   * @generated from field: string sha = 2;
   */
  sha = ""

  /**
   * @generated from field: lekko.feature.v1beta1.Feature feature = 3;
   */
  feature?: Feature$1

  constructor(data?: PartialMessage<Feature>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "lekko.backend.v1beta1.Feature"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "feature", kind: "message", T: Feature$1 },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Feature {
    return new Feature().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Feature {
    return new Feature().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Feature {
    return new Feature().fromJsonString(jsonString, options)
  }

  static equals(
    a: Feature | PlainMessage<Feature> | undefined,
    b: Feature | PlainMessage<Feature> | undefined,
  ): boolean {
    return proto3.util.equals(Feature, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.ContextKey
 */
export class ContextKey extends Message<ContextKey> {
  /**
   * @generated from field: string key = 1;
   */
  key = ""

  /**
   * @generated from field: string type = 2;
   */
  type = ""

  constructor(data?: PartialMessage<ContextKey>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "lekko.backend.v1beta1.ContextKey"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ContextKey {
    return new ContextKey().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ContextKey {
    return new ContextKey().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ContextKey {
    return new ContextKey().fromJsonString(jsonString, options)
  }

  static equals(
    a: ContextKey | PlainMessage<ContextKey> | undefined,
    b: ContextKey | PlainMessage<ContextKey> | undefined,
  ): boolean {
    return proto3.util.equals(ContextKey, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.FlagEvaluationEvent
 */
export class FlagEvaluationEvent extends Message<FlagEvaluationEvent> {
  /**
   * @generated from field: lekko.backend.v1beta1.RepositoryKey repo_key = 1;
   */
  repoKey?: RepositoryKey

  /**
   * @generated from field: string commit_sha = 2;
   */
  commitSha = ""

  /**
   * @generated from field: string feature_sha = 3;
   */
  featureSha = ""

  /**
   * @generated from field: string namespace_name = 4;
   */
  namespaceName = ""

  /**
   * @generated from field: string feature_name = 5;
   */
  featureName = ""

  /**
   * A list of context keys (not values) that were provided at runtime.
   *
   * @generated from field: repeated lekko.backend.v1beta1.ContextKey context_keys = 6;
   */
  contextKeys: ContextKey[] = []

  /**
   * The node in the tree that contained the final return value of the feature.
   *
   * @generated from field: repeated int32 result_path = 7;
   */
  resultPath: number[] = []

  /**
   * @generated from field: google.protobuf.Timestamp client_event_time = 8;
   */
  clientEventTime?: Timestamp

  constructor(data?: PartialMessage<FlagEvaluationEvent>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "lekko.backend.v1beta1.FlagEvaluationEvent"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_key", kind: "message", T: RepositoryKey },
    { no: 2, name: "commit_sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: "feature_sha",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 4,
      name: "namespace_name",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 5,
      name: "feature_name",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 6,
      name: "context_keys",
      kind: "message",
      T: ContextKey,
      repeated: true,
    },
    {
      no: 7,
      name: "result_path",
      kind: "scalar",
      T: 5 /* ScalarType.INT32 */,
      repeated: true,
    },
    { no: 8, name: "client_event_time", kind: "message", T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): FlagEvaluationEvent {
    return new FlagEvaluationEvent().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): FlagEvaluationEvent {
    return new FlagEvaluationEvent().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): FlagEvaluationEvent {
    return new FlagEvaluationEvent().fromJsonString(jsonString, options)
  }

  static equals(
    a: FlagEvaluationEvent | PlainMessage<FlagEvaluationEvent> | undefined,
    b: FlagEvaluationEvent | PlainMessage<FlagEvaluationEvent> | undefined,
  ): boolean {
    return proto3.util.equals(FlagEvaluationEvent, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.SendFlagEvaluationMetricsRequest
 */
export class SendFlagEvaluationMetricsRequest extends Message<SendFlagEvaluationMetricsRequest> {
  /**
   * @generated from field: repeated lekko.backend.v1beta1.FlagEvaluationEvent events = 1;
   */
  events: FlagEvaluationEvent[] = []

  /**
   * @generated from field: string session_key = 2;
   */
  sessionKey = ""

  constructor(data?: PartialMessage<SendFlagEvaluationMetricsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    "lekko.backend.v1beta1.SendFlagEvaluationMetricsRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "events",
      kind: "message",
      T: FlagEvaluationEvent,
      repeated: true,
    },
    {
      no: 2,
      name: "session_key",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SendFlagEvaluationMetricsRequest {
    return new SendFlagEvaluationMetricsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SendFlagEvaluationMetricsRequest {
    return new SendFlagEvaluationMetricsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SendFlagEvaluationMetricsRequest {
    return new SendFlagEvaluationMetricsRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | SendFlagEvaluationMetricsRequest
      | PlainMessage<SendFlagEvaluationMetricsRequest>
      | undefined,
    b:
      | SendFlagEvaluationMetricsRequest
      | PlainMessage<SendFlagEvaluationMetricsRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(SendFlagEvaluationMetricsRequest, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.SendFlagEvaluationMetricsResponse
 */
export class SendFlagEvaluationMetricsResponse extends Message<SendFlagEvaluationMetricsResponse> {
  constructor(data?: PartialMessage<SendFlagEvaluationMetricsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    "lekko.backend.v1beta1.SendFlagEvaluationMetricsResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SendFlagEvaluationMetricsResponse {
    return new SendFlagEvaluationMetricsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SendFlagEvaluationMetricsResponse {
    return new SendFlagEvaluationMetricsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SendFlagEvaluationMetricsResponse {
    return new SendFlagEvaluationMetricsResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | SendFlagEvaluationMetricsResponse
      | PlainMessage<SendFlagEvaluationMetricsResponse>
      | undefined,
    b:
      | SendFlagEvaluationMetricsResponse
      | PlainMessage<SendFlagEvaluationMetricsResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(SendFlagEvaluationMetricsResponse, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.RegisterClientRequest
 */
export class RegisterClientRequest extends Message<RegisterClientRequest> {
  /**
   * @generated from field: lekko.backend.v1beta1.RepositoryKey repo_key = 1;
   */
  repoKey?: RepositoryKey

  /**
   * The namespaces to register within the repo. If empty,
   * all namespaces will be registered.
   *
   * @generated from field: repeated string namespace_list = 2;
   */
  namespaceList: string[] = []

  /**
   * If the client was initialized from a git bootstrap,
   * the commit sha is provided. If there was no bootstrap, this
   * can be an empty string.
   *
   * @generated from field: string initial_bootstrap_sha = 3;
   */
  initialBootstrapSha = ""

  /**
   * If the client is a lekko sidecar, provide the semver version,
   * or if not available, the sha of the sidecar.
   *
   * @generated from field: string sidecar_version = 4;
   */
  sidecarVersion = ""

  constructor(data?: PartialMessage<RegisterClientRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "lekko.backend.v1beta1.RegisterClientRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_key", kind: "message", T: RepositoryKey },
    {
      no: 2,
      name: "namespace_list",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    {
      no: 3,
      name: "initial_bootstrap_sha",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 4,
      name: "sidecar_version",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): RegisterClientRequest {
    return new RegisterClientRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): RegisterClientRequest {
    return new RegisterClientRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RegisterClientRequest {
    return new RegisterClientRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: RegisterClientRequest | PlainMessage<RegisterClientRequest> | undefined,
    b: RegisterClientRequest | PlainMessage<RegisterClientRequest> | undefined,
  ): boolean {
    return proto3.util.equals(RegisterClientRequest, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.RegisterClientResponse
 */
export class RegisterClientResponse extends Message<RegisterClientResponse> {
  /**
   * TODO make this field 1 if we rewrite the API.
   *
   * @generated from field: string session_key = 4;
   */
  sessionKey = ""

  constructor(data?: PartialMessage<RegisterClientResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "lekko.backend.v1beta1.RegisterClientResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 4,
      name: "session_key",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): RegisterClientResponse {
    return new RegisterClientResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): RegisterClientResponse {
    return new RegisterClientResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RegisterClientResponse {
    return new RegisterClientResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | RegisterClientResponse
      | PlainMessage<RegisterClientResponse>
      | undefined,
    b:
      | RegisterClientResponse
      | PlainMessage<RegisterClientResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(RegisterClientResponse, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.DeregisterClientRequest
 */
export class DeregisterClientRequest extends Message<DeregisterClientRequest> {
  /**
   * @generated from field: string session_key = 1;
   */
  sessionKey = ""

  constructor(data?: PartialMessage<DeregisterClientRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "lekko.backend.v1beta1.DeregisterClientRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "session_key",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeregisterClientRequest {
    return new DeregisterClientRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeregisterClientRequest {
    return new DeregisterClientRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeregisterClientRequest {
    return new DeregisterClientRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeregisterClientRequest
      | PlainMessage<DeregisterClientRequest>
      | undefined,
    b:
      | DeregisterClientRequest
      | PlainMessage<DeregisterClientRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeregisterClientRequest, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.DeregisterClientResponse
 */
export class DeregisterClientResponse extends Message<DeregisterClientResponse> {
  constructor(data?: PartialMessage<DeregisterClientResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "lekko.backend.v1beta1.DeregisterClientResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DeregisterClientResponse {
    return new DeregisterClientResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DeregisterClientResponse {
    return new DeregisterClientResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DeregisterClientResponse {
    return new DeregisterClientResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeregisterClientResponse
      | PlainMessage<DeregisterClientResponse>
      | undefined,
    b:
      | DeregisterClientResponse
      | PlainMessage<DeregisterClientResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(DeregisterClientResponse, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.GetDeveloperAccessTokenRequest
 */
export class GetDeveloperAccessTokenRequest extends Message<GetDeveloperAccessTokenRequest> {
  constructor(data?: PartialMessage<GetDeveloperAccessTokenRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    "lekko.backend.v1beta1.GetDeveloperAccessTokenRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetDeveloperAccessTokenRequest {
    return new GetDeveloperAccessTokenRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetDeveloperAccessTokenRequest {
    return new GetDeveloperAccessTokenRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetDeveloperAccessTokenRequest {
    return new GetDeveloperAccessTokenRequest().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetDeveloperAccessTokenRequest
      | PlainMessage<GetDeveloperAccessTokenRequest>
      | undefined,
    b:
      | GetDeveloperAccessTokenRequest
      | PlainMessage<GetDeveloperAccessTokenRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetDeveloperAccessTokenRequest, a, b)
  }
}

/**
 * @generated from message lekko.backend.v1beta1.GetDeveloperAccessTokenResponse
 */
export class GetDeveloperAccessTokenResponse extends Message<GetDeveloperAccessTokenResponse> {
  /**
   * github access token
   *
   * @generated from field: string token = 1;
   */
  token = ""

  constructor(data?: PartialMessage<GetDeveloperAccessTokenResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    "lekko.backend.v1beta1.GetDeveloperAccessTokenResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetDeveloperAccessTokenResponse {
    return new GetDeveloperAccessTokenResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetDeveloperAccessTokenResponse {
    return new GetDeveloperAccessTokenResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetDeveloperAccessTokenResponse {
    return new GetDeveloperAccessTokenResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | GetDeveloperAccessTokenResponse
      | PlainMessage<GetDeveloperAccessTokenResponse>
      | undefined,
    b:
      | GetDeveloperAccessTokenResponse
      | PlainMessage<GetDeveloperAccessTokenResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(GetDeveloperAccessTokenResponse, a, b)
  }
}
